// Generated by CoffeeScript 1.7.1
(function() {
  var assert;

  assert = require('assert');

  suite('Meteor-Vue', function() {
    test('Environment Setup', function(done, server, client) {
      client["eval"](function() {
        var v;
        v = new Vue();
        return emit('isVueExist', v != null);
      });
      return client.once('isVueExist', function(isVueExist) {
        assert.equal(isVueExist, true);
        return done();
      });
    });
    test('Methods ready', function(done, server, client) {
      client["eval"](function() {
        var isVueMethodReady, v;
        v = new Vue();
        isVueMethodReady = _.every([v.$$syncDict != null, v.$sync != null, v.$unsync != null]);
        return emit('isVueMethodReady', isVueMethodReady);
      });
      return client.once('isVueMethodReady', function(isVueMethodReady) {
        assert.equal(isVueMethodReady, true);
        return done();
      });
    });
    test('Sync Session reactive', function(done, server, client) {
      client["eval"](function() {
        Session.set('sessionPost', '1');
        waitForDOM('#post', function() {
          return window.v = new Vue({
            sync: {
              sessionPost: function() {
                return Session.get('sessionPost');
              }
            }
          });
        });
        Session.set('sessionPost', '2');
        Deps.flush();
        return Deps.afterFlush(function() {
          var expectTrue;
          expectTrue = _.isEqual(window.v.sessionPost, Session.get('sessionPost'));
          return emit('client-get-sessionPost', expectTrue);
        });
      });
      return client.once('client-get-sessionPost', function(expectTrue) {
        assert(expectTrue);
        return done();
      });
    });
    return test('Sync findOne()', function(done, server, client) {
      server["eval"](function() {
        return Posts.insert({
          _id: 'xxx',
          title: '1'
        });
      });
      client["eval"](function() {
        var emitPost, xxx;
        emitPost = function(post) {
          waitForDOM('#post', function() {
            return window.v = new Vue({
              el: '#post',
              sync: {
                post: function() {
                  return Posts.findOne('xxx');
                }
              },
              computed: {
                postTitleWordCount: function() {
                  var _ref, _ref1;
                  return (_ref = this.post) != null ? (_ref1 = _ref.title) != null ? _ref1.length : void 0 : void 0;
                }
              }
            });
          });
          Deps.flush();
          return Deps.afterFlush(function() {
            var expectTrue;
            expectTrue = _.every([!_.isArray(window.v.post), _.isEqual(post, window.v.post), $("div#post:contains('" + post._id + "')").length, _.isEqual(window.v.postTitleWordCount, post.title.length)]);
            return emit('client-get-post', expectTrue);
          });
        };
        xxx = Posts.findOne('xxx');
        if (xxx != null) {
          return emitPost(xxx);
        } else {
          return Posts.find('xxx').observe({
            added: emitPost
          });
        }
      });
      return client.once('client-get-post', function(expectTrue) {
        assert(expectTrue);
        return done();
      });
    });
  });

}).call(this);
